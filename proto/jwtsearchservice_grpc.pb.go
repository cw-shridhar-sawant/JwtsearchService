// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package JwtsearchService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JwtsearchServiceClient is the client API for JwtsearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwtsearchServiceClient interface {
	Getjwtdetails(ctx context.Context, in *TvInfo, opts ...grpc.CallOption) (*Tile, error)
	Postjwtdetails(ctx context.Context, in *TvInfo, opts ...grpc.CallOption) (*Row, error)
}

type jwtsearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtsearchServiceClient(cc grpc.ClientConnInterface) JwtsearchServiceClient {
	return &jwtsearchServiceClient{cc}
}

func (c *jwtsearchServiceClient) Getjwtdetails(ctx context.Context, in *TvInfo, opts ...grpc.CallOption) (*Tile, error) {
	out := new(Tile)
	err := c.cc.Invoke(ctx, "/JwtsearchService.JwtsearchService/Getjwtdetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtsearchServiceClient) Postjwtdetails(ctx context.Context, in *TvInfo, opts ...grpc.CallOption) (*Row, error) {
	out := new(Row)
	err := c.cc.Invoke(ctx, "/JwtsearchService.JwtsearchService/Postjwtdetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtsearchServiceServer is the server API for JwtsearchService service.
// All implementations should embed UnimplementedJwtsearchServiceServer
// for forward compatibility
type JwtsearchServiceServer interface {
	Getjwtdetails(context.Context, *TvInfo) (*Tile, error)
	Postjwtdetails(context.Context, *TvInfo) (*Row, error)
}

// UnimplementedJwtsearchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJwtsearchServiceServer struct {
}

func (UnimplementedJwtsearchServiceServer) Getjwtdetails(context.Context, *TvInfo) (*Tile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getjwtdetails not implemented")
}
func (UnimplementedJwtsearchServiceServer) Postjwtdetails(context.Context, *TvInfo) (*Row, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Postjwtdetails not implemented")
}

// UnsafeJwtsearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtsearchServiceServer will
// result in compilation errors.
type UnsafeJwtsearchServiceServer interface {
	mustEmbedUnimplementedJwtsearchServiceServer()
}

func RegisterJwtsearchServiceServer(s grpc.ServiceRegistrar, srv JwtsearchServiceServer) {
	s.RegisterService(&JwtsearchService_ServiceDesc, srv)
}

func _JwtsearchService_Getjwtdetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TvInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtsearchServiceServer).Getjwtdetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JwtsearchService.JwtsearchService/Getjwtdetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtsearchServiceServer).Getjwtdetails(ctx, req.(*TvInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtsearchService_Postjwtdetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TvInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtsearchServiceServer).Postjwtdetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JwtsearchService.JwtsearchService/Postjwtdetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtsearchServiceServer).Postjwtdetails(ctx, req.(*TvInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// JwtsearchService_ServiceDesc is the grpc.ServiceDesc for JwtsearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JwtsearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JwtsearchService.JwtsearchService",
	HandlerType: (*JwtsearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getjwtdetails",
			Handler:    _JwtsearchService_Getjwtdetails_Handler,
		},
		{
			MethodName: "Postjwtdetails",
			Handler:    _JwtsearchService_Postjwtdetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jwtsearchservice.proto",
}
